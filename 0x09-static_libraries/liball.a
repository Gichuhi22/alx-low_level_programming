!<arch>
0-isupper.c/    0           0     0     644     220       `
#include "main.h"
/**
 * _isupper - function checks for uppercase character
 *
 * @c: passed parameter
 *
 * Return: return 0 or 1
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     370       `
#include "main.h"
/**
 * *_memset - function that fills memory with a constant
 * byte
 *
 * @s: pointer to address of memory
 * @b: byte to fill memory with
 * @n: size of memory to be filled
 *
 * Return: returns a pointer to memory area
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     378       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: pointer to destination string
 * @src: pointer to source string
 *
 * Return: returns a string
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
		i++;
	while (src[j] != '\0')
	{
		*(dest + i) = src[j];
		j++;
		i++;
	}

	*(dest + i) = '\0';

	return (dest);
}
1-isdigit.c/    0           0     0     644     202       `
#include "main.h"
/**
 *_isdigit - checks for a digit(0 - 9)
 *@c: passed parameter
 *
 *Return: returns 0 or 1
 *
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     364       `
#include"main.h"
/**
 * *_memcpy - function that copies a memory area
 * @dest: destination memory location
 * @src: source momory loction
 * @n: size of memory area to be copied
 *
 * Return: returns pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     380       `
#include "main.h"
#include <string.h>
/**
 * _strncat - concatenates two strings
 * @dest: pointer to destination string
 * @src: pointer to source string
 * @n: max number of bytes used
 *
 * Return: returns a string.
 */
char *_strncat(char *dest, char *src, int n)
{
	int j, len;

	len = strlen(dest);
	for (j = 0; j < n; j++)
	{
		dest[len + j] = src[j];
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     281       `
#include "main.h"
#include <string.h>
#include <stdlib.h>
/**
 * _atoi - function to convert a string to integer
 * @s: Pointer to the string to be converted
 *
 * Return: returns an integer value
 */
int _atoi(char *s)
{
	unsigned int i;

	i = strtol(s, NULL, 10);
	return (i);
}

2-strchr.c/     0           0     0     644     322       `
#include"main.h"
/**
 * *_strchr - function to locate a certain character
 * in a string
 *
 * @s: pointer to string
 * @c: passed paramater from main
 *
 * Return: returns char pointer
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     224       `
#include "main.h"
#include <string.h>
/**
 *_strlen - returns the length of a string
 *@s: pointer to the string
 *
 *Return: returns an integer value
 */
int _strlen(char *s)
{
	int len;

	len = strlen(s);
	return (len);
}
2-strncpy.c/    0           0     0     644     409       `
#include "main.h"
/**
 * *_strncpy - function that copies a string
 * @dest: pointer to destination string
 * @src: pointer to source string
 * @n: number of bytes to copy
 *
 * Return: returns a character value
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		*(dest + i) = src[i];
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     241       `
#include "main.h"
/**
 * _islower - checks for lower case character
 *@c:  parameter to be checked
 *
 * Return: returns 1 if true and 0 if otherwise
 */
int _islower(int c)
{

	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);

}

3-puts.c/       0           0     0     644     230       `
#include "main.h"
#include <string.h>
/**
 *_puts - prints a string
 *@str: a pointer to the string
 *
 * Return: null
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
		_putchar(str[i]);

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     440       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: pointer to first string
 * @s2: pointer to second string
 *
 * Return: returns an integer value
 */
int _strcmp(char *s1, char *s2)
{
	int i, flag;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] > s2[i])
		{
			flag = s1[i] - s2[i];
			break;
		}
		else if (s1[i] < s2[i])
		{
			flag = s1[i] - s2[i];
			break;
		}
		else
			flag = 0;
	}
	return (flag);
}
3-strspn.c/     0           0     0     644     444       `
#include "main.h"
/**
 * _strspn - function that gets the length
 * of a prefix substring
 * @s: pointer to first string
 * @accept: bytes of which the first string is accepted
 *
 * Return: Returns unsigned integer value
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, count;

	count = 0;

	for (i = 0; s[i] != 32; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
				count++;
		}
	}
	return (count);
}
4-isalpha.c/    0           0     0     644     252       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 *
 * @c: parameter to be checked
 *
 * Return: 1 if true 0 if not
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'z'))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     395       `
#include "main.h"
/**
 * *_strpbrk - searches and prints a set of bytes
 *@s: pointer to searched string
 *@accept: search condition string
 *
 * Return: returns a string or character
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
		}
	}
	return (0);
}

5-strstr.c/     0           0     0     644     769       `
#include"main.h"
/**
 * *_strstr - function that locates a substring
 * @haystack: pointer to the first searched string
 * @needle: pointer to search conditions
 *
 * Return: returns a pointer
 */

char *_strstr(char *haystack, char *needle)
{
	int i, j, count = 0;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i] == needle[j])
			{
				i++;
				j++;
				count++;
			}
		}
	}
	if (count > 3)
		return (&haystack[i]);
	else
	return (0);
}

/*char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0, j = 0; haystack[i] != '\0' && needle[j] != '\0'; i++)
	{
		if (haystack[i] == needle[j])
		{
			j++;
		}
		else
		{
			j = 0;
		}
	}
	if (j == 1)
	{
		return (&haystack[i]);
	}
	else
		return (0);
}*/

6-abs.c/        0           0     0     644     219       `
#include "main.h"
/**
 *_abs - computes the absloute value of an integer
 *
 * @i: the [assed parameter value
 *
 *Return: returns the integer value i
 */
int _abs(int i)
{
	if (i < 0)
	{
	i = i / -1;
	}
	return (i);
}

9-strcpy.c/     0           0     0     644     265       `
#include "main.h"
#include <string.h>
/**
 *_strcpy - cpoies one string to another
 *@dest: destination string pointer
 *@src: source string pointer
 *Return: returns a charcter value
 */
char *_strcpy(char *dest, char *src)
{
	strcpy(dest, src);
	return (dest);
}

_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
		return (write(1, &c, 1));
}
main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
